// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package portmapping

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// KIND PortMapping type
type PortMapping struct {
	ContainerPort *int    `pulumi:"containerPort"`
	HostPort      *int    `pulumi:"hostPort"`
	ListenAddress *string `pulumi:"listenAddress"`
	Protocol      *string `pulumi:"protocol"`
}

// PortMappingInput is an input type that accepts PortMappingArgs and PortMappingOutput values.
// You can construct a concrete instance of `PortMappingInput` via:
//
//          PortMappingArgs{...}
type PortMappingInput interface {
	pulumi.Input

	ToPortMappingOutput() PortMappingOutput
	ToPortMappingOutputWithContext(context.Context) PortMappingOutput
}

// KIND PortMapping type
type PortMappingArgs struct {
	ContainerPort pulumi.IntPtrInput    `pulumi:"containerPort"`
	HostPort      pulumi.IntPtrInput    `pulumi:"hostPort"`
	ListenAddress pulumi.StringPtrInput `pulumi:"listenAddress"`
	Protocol      pulumi.StringPtrInput `pulumi:"protocol"`
}

func (PortMappingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PortMapping)(nil)).Elem()
}

func (i PortMappingArgs) ToPortMappingOutput() PortMappingOutput {
	return i.ToPortMappingOutputWithContext(context.Background())
}

func (i PortMappingArgs) ToPortMappingOutputWithContext(ctx context.Context) PortMappingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PortMappingOutput)
}

// PortMappingArrayInput is an input type that accepts PortMappingArray and PortMappingArrayOutput values.
// You can construct a concrete instance of `PortMappingArrayInput` via:
//
//          PortMappingArray{ PortMappingArgs{...} }
type PortMappingArrayInput interface {
	pulumi.Input

	ToPortMappingArrayOutput() PortMappingArrayOutput
	ToPortMappingArrayOutputWithContext(context.Context) PortMappingArrayOutput
}

type PortMappingArray []PortMappingInput

func (PortMappingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PortMapping)(nil)).Elem()
}

func (i PortMappingArray) ToPortMappingArrayOutput() PortMappingArrayOutput {
	return i.ToPortMappingArrayOutputWithContext(context.Background())
}

func (i PortMappingArray) ToPortMappingArrayOutputWithContext(ctx context.Context) PortMappingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PortMappingArrayOutput)
}

// KIND PortMapping type
type PortMappingOutput struct{ *pulumi.OutputState }

func (PortMappingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PortMapping)(nil)).Elem()
}

func (o PortMappingOutput) ToPortMappingOutput() PortMappingOutput {
	return o
}

func (o PortMappingOutput) ToPortMappingOutputWithContext(ctx context.Context) PortMappingOutput {
	return o
}

func (o PortMappingOutput) ContainerPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PortMapping) *int { return v.ContainerPort }).(pulumi.IntPtrOutput)
}

func (o PortMappingOutput) HostPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PortMapping) *int { return v.HostPort }).(pulumi.IntPtrOutput)
}

func (o PortMappingOutput) ListenAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PortMapping) *string { return v.ListenAddress }).(pulumi.StringPtrOutput)
}

func (o PortMappingOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PortMapping) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

type PortMappingArrayOutput struct{ *pulumi.OutputState }

func (PortMappingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PortMapping)(nil)).Elem()
}

func (o PortMappingArrayOutput) ToPortMappingArrayOutput() PortMappingArrayOutput {
	return o
}

func (o PortMappingArrayOutput) ToPortMappingArrayOutputWithContext(ctx context.Context) PortMappingArrayOutput {
	return o
}

func (o PortMappingArrayOutput) Index(i pulumi.IntInput) PortMappingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PortMapping {
		return vs[0].([]PortMapping)[vs[1].(int)]
	}).(PortMappingOutput)
}

func init() {
	pulumi.RegisterOutputType(PortMappingOutput{})
	pulumi.RegisterOutputType(PortMappingArrayOutput{})
}
