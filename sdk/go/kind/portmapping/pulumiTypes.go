// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package portmapping

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// KIND PortMapping
type PortMappingType struct {
	ContainerPort *int    `pulumi:"containerPort"`
	HostPort      *int    `pulumi:"hostPort"`
	ListenAddress *string `pulumi:"listenAddress"`
	Protocol      *string `pulumi:"protocol"`
}

// PortMappingTypeInput is an input type that accepts PortMappingTypeArgs and PortMappingTypeOutput values.
// You can construct a concrete instance of `PortMappingTypeInput` via:
//
//          PortMappingTypeArgs{...}
type PortMappingTypeInput interface {
	pulumi.Input

	ToPortMappingTypeOutput() PortMappingTypeOutput
	ToPortMappingTypeOutputWithContext(context.Context) PortMappingTypeOutput
}

// KIND PortMapping
type PortMappingTypeArgs struct {
	ContainerPort pulumi.IntPtrInput    `pulumi:"containerPort"`
	HostPort      pulumi.IntPtrInput    `pulumi:"hostPort"`
	ListenAddress pulumi.StringPtrInput `pulumi:"listenAddress"`
	Protocol      pulumi.StringPtrInput `pulumi:"protocol"`
}

func (PortMappingTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PortMappingType)(nil)).Elem()
}

func (i PortMappingTypeArgs) ToPortMappingTypeOutput() PortMappingTypeOutput {
	return i.ToPortMappingTypeOutputWithContext(context.Background())
}

func (i PortMappingTypeArgs) ToPortMappingTypeOutputWithContext(ctx context.Context) PortMappingTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PortMappingTypeOutput)
}

// PortMappingTypeArrayInput is an input type that accepts PortMappingTypeArray and PortMappingTypeArrayOutput values.
// You can construct a concrete instance of `PortMappingTypeArrayInput` via:
//
//          PortMappingTypeArray{ PortMappingTypeArgs{...} }
type PortMappingTypeArrayInput interface {
	pulumi.Input

	ToPortMappingTypeArrayOutput() PortMappingTypeArrayOutput
	ToPortMappingTypeArrayOutputWithContext(context.Context) PortMappingTypeArrayOutput
}

type PortMappingTypeArray []PortMappingTypeInput

func (PortMappingTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PortMappingType)(nil)).Elem()
}

func (i PortMappingTypeArray) ToPortMappingTypeArrayOutput() PortMappingTypeArrayOutput {
	return i.ToPortMappingTypeArrayOutputWithContext(context.Background())
}

func (i PortMappingTypeArray) ToPortMappingTypeArrayOutputWithContext(ctx context.Context) PortMappingTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PortMappingTypeArrayOutput)
}

// KIND PortMapping
type PortMappingTypeOutput struct{ *pulumi.OutputState }

func (PortMappingTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PortMappingType)(nil)).Elem()
}

func (o PortMappingTypeOutput) ToPortMappingTypeOutput() PortMappingTypeOutput {
	return o
}

func (o PortMappingTypeOutput) ToPortMappingTypeOutputWithContext(ctx context.Context) PortMappingTypeOutput {
	return o
}

func (o PortMappingTypeOutput) ContainerPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PortMappingType) *int { return v.ContainerPort }).(pulumi.IntPtrOutput)
}

func (o PortMappingTypeOutput) HostPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PortMappingType) *int { return v.HostPort }).(pulumi.IntPtrOutput)
}

func (o PortMappingTypeOutput) ListenAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PortMappingType) *string { return v.ListenAddress }).(pulumi.StringPtrOutput)
}

func (o PortMappingTypeOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PortMappingType) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

type PortMappingTypeArrayOutput struct{ *pulumi.OutputState }

func (PortMappingTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PortMappingType)(nil)).Elem()
}

func (o PortMappingTypeArrayOutput) ToPortMappingTypeArrayOutput() PortMappingTypeArrayOutput {
	return o
}

func (o PortMappingTypeArrayOutput) ToPortMappingTypeArrayOutputWithContext(ctx context.Context) PortMappingTypeArrayOutput {
	return o
}

func (o PortMappingTypeArrayOutput) Index(i pulumi.IntInput) PortMappingTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PortMappingType {
		return vs[0].([]PortMappingType)[vs[1].(int)]
	}).(PortMappingTypeOutput)
}

func init() {
	pulumi.RegisterOutputType(PortMappingTypeOutput{})
	pulumi.RegisterOutputType(PortMappingTypeArrayOutput{})
}
