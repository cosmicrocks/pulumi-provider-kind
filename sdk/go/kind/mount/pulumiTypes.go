// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package mount

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// KIND Mount
type MountType struct {
	ContainerPath  *string `pulumi:"containerPath"`
	HostPath       *string `pulumi:"hostPath"`
	Propagation    *string `pulumi:"propagation"`
	ReadOnly       *bool   `pulumi:"readOnly"`
	SelinuxRelabel *bool   `pulumi:"selinuxRelabel"`
}

// MountTypeInput is an input type that accepts MountTypeArgs and MountTypeOutput values.
// You can construct a concrete instance of `MountTypeInput` via:
//
//          MountTypeArgs{...}
type MountTypeInput interface {
	pulumi.Input

	ToMountTypeOutput() MountTypeOutput
	ToMountTypeOutputWithContext(context.Context) MountTypeOutput
}

// KIND Mount
type MountTypeArgs struct {
	ContainerPath  pulumi.StringPtrInput `pulumi:"containerPath"`
	HostPath       pulumi.StringPtrInput `pulumi:"hostPath"`
	Propagation    pulumi.StringPtrInput `pulumi:"propagation"`
	ReadOnly       pulumi.BoolPtrInput   `pulumi:"readOnly"`
	SelinuxRelabel pulumi.BoolPtrInput   `pulumi:"selinuxRelabel"`
}

func (MountTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MountType)(nil)).Elem()
}

func (i MountTypeArgs) ToMountTypeOutput() MountTypeOutput {
	return i.ToMountTypeOutputWithContext(context.Background())
}

func (i MountTypeArgs) ToMountTypeOutputWithContext(ctx context.Context) MountTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MountTypeOutput)
}

// MountTypeArrayInput is an input type that accepts MountTypeArray and MountTypeArrayOutput values.
// You can construct a concrete instance of `MountTypeArrayInput` via:
//
//          MountTypeArray{ MountTypeArgs{...} }
type MountTypeArrayInput interface {
	pulumi.Input

	ToMountTypeArrayOutput() MountTypeArrayOutput
	ToMountTypeArrayOutputWithContext(context.Context) MountTypeArrayOutput
}

type MountTypeArray []MountTypeInput

func (MountTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MountType)(nil)).Elem()
}

func (i MountTypeArray) ToMountTypeArrayOutput() MountTypeArrayOutput {
	return i.ToMountTypeArrayOutputWithContext(context.Background())
}

func (i MountTypeArray) ToMountTypeArrayOutputWithContext(ctx context.Context) MountTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MountTypeArrayOutput)
}

// KIND Mount
type MountTypeOutput struct{ *pulumi.OutputState }

func (MountTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MountType)(nil)).Elem()
}

func (o MountTypeOutput) ToMountTypeOutput() MountTypeOutput {
	return o
}

func (o MountTypeOutput) ToMountTypeOutputWithContext(ctx context.Context) MountTypeOutput {
	return o
}

func (o MountTypeOutput) ContainerPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MountType) *string { return v.ContainerPath }).(pulumi.StringPtrOutput)
}

func (o MountTypeOutput) HostPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MountType) *string { return v.HostPath }).(pulumi.StringPtrOutput)
}

func (o MountTypeOutput) Propagation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MountType) *string { return v.Propagation }).(pulumi.StringPtrOutput)
}

func (o MountTypeOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MountType) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

func (o MountTypeOutput) SelinuxRelabel() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MountType) *bool { return v.SelinuxRelabel }).(pulumi.BoolPtrOutput)
}

type MountTypeArrayOutput struct{ *pulumi.OutputState }

func (MountTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MountType)(nil)).Elem()
}

func (o MountTypeArrayOutput) ToMountTypeArrayOutput() MountTypeArrayOutput {
	return o
}

func (o MountTypeArrayOutput) ToMountTypeArrayOutputWithContext(ctx context.Context) MountTypeArrayOutput {
	return o
}

func (o MountTypeArrayOutput) Index(i pulumi.IntInput) MountTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MountType {
		return vs[0].([]MountType)[vs[1].(int)]
	}).(MountTypeOutput)
}

func init() {
	pulumi.RegisterOutputType(MountTypeOutput{})
	pulumi.RegisterOutputType(MountTypeArrayOutput{})
}
