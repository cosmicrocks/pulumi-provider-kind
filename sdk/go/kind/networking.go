// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package kind

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// KIND Networking
type Networking struct {
	pulumi.CustomResourceState
}

// NewNetworking registers a new resource with the given unique name, arguments, and options.
func NewNetworking(ctx *pulumi.Context,
	name string, args *NetworkingArgs, opts ...pulumi.ResourceOption) (*Networking, error) {
	if args == nil {
		args = &NetworkingArgs{}
	}

	var resource Networking
	err := ctx.RegisterResource("kind:index:Networking", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNetworking gets an existing Networking resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNetworking(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NetworkingState, opts ...pulumi.ResourceOption) (*Networking, error) {
	var resource Networking
	err := ctx.ReadResource("kind:index:Networking", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Networking resources.
type networkingState struct {
}

type NetworkingState struct {
}

func (NetworkingState) ElementType() reflect.Type {
	return reflect.TypeOf((*networkingState)(nil)).Elem()
}

type networkingArgs struct {
	ApiServerAddress  *string `pulumi:"apiServerAddress"`
	ApiServerPort     *int    `pulumi:"apiServerPort"`
	DisableDefaultCNI *bool   `pulumi:"disableDefaultCNI"`
	IpFamily          *string `pulumi:"ipFamily"`
	KubeProxyMode     *string `pulumi:"kubeProxyMode"`
	PodSubnet         *string `pulumi:"podSubnet"`
	ServiceSubnet     *string `pulumi:"serviceSubnet"`
}

// The set of arguments for constructing a Networking resource.
type NetworkingArgs struct {
	ApiServerAddress  pulumi.StringPtrInput
	ApiServerPort     pulumi.IntPtrInput
	DisableDefaultCNI pulumi.BoolPtrInput
	IpFamily          pulumi.StringPtrInput
	KubeProxyMode     pulumi.StringPtrInput
	PodSubnet         pulumi.StringPtrInput
	ServiceSubnet     pulumi.StringPtrInput
}

func (NetworkingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*networkingArgs)(nil)).Elem()
}

type NetworkingInput interface {
	pulumi.Input

	ToNetworkingOutput() NetworkingOutput
	ToNetworkingOutputWithContext(ctx context.Context) NetworkingOutput
}

func (*Networking) ElementType() reflect.Type {
	return reflect.TypeOf((*Networking)(nil))
}

func (i *Networking) ToNetworkingOutput() NetworkingOutput {
	return i.ToNetworkingOutputWithContext(context.Background())
}

func (i *Networking) ToNetworkingOutputWithContext(ctx context.Context) NetworkingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkingOutput)
}

func (i *Networking) ToNetworkingPtrOutput() NetworkingPtrOutput {
	return i.ToNetworkingPtrOutputWithContext(context.Background())
}

func (i *Networking) ToNetworkingPtrOutputWithContext(ctx context.Context) NetworkingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkingPtrOutput)
}

type NetworkingPtrInput interface {
	pulumi.Input

	ToNetworkingPtrOutput() NetworkingPtrOutput
	ToNetworkingPtrOutputWithContext(ctx context.Context) NetworkingPtrOutput
}

type networkingPtrType NetworkingArgs

func (*networkingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Networking)(nil))
}

func (i *networkingPtrType) ToNetworkingPtrOutput() NetworkingPtrOutput {
	return i.ToNetworkingPtrOutputWithContext(context.Background())
}

func (i *networkingPtrType) ToNetworkingPtrOutputWithContext(ctx context.Context) NetworkingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkingPtrOutput)
}

// NetworkingArrayInput is an input type that accepts NetworkingArray and NetworkingArrayOutput values.
// You can construct a concrete instance of `NetworkingArrayInput` via:
//
//          NetworkingArray{ NetworkingArgs{...} }
type NetworkingArrayInput interface {
	pulumi.Input

	ToNetworkingArrayOutput() NetworkingArrayOutput
	ToNetworkingArrayOutputWithContext(context.Context) NetworkingArrayOutput
}

type NetworkingArray []NetworkingInput

func (NetworkingArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*Networking)(nil))
}

func (i NetworkingArray) ToNetworkingArrayOutput() NetworkingArrayOutput {
	return i.ToNetworkingArrayOutputWithContext(context.Background())
}

func (i NetworkingArray) ToNetworkingArrayOutputWithContext(ctx context.Context) NetworkingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkingArrayOutput)
}

// NetworkingMapInput is an input type that accepts NetworkingMap and NetworkingMapOutput values.
// You can construct a concrete instance of `NetworkingMapInput` via:
//
//          NetworkingMap{ "key": NetworkingArgs{...} }
type NetworkingMapInput interface {
	pulumi.Input

	ToNetworkingMapOutput() NetworkingMapOutput
	ToNetworkingMapOutputWithContext(context.Context) NetworkingMapOutput
}

type NetworkingMap map[string]NetworkingInput

func (NetworkingMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*Networking)(nil))
}

func (i NetworkingMap) ToNetworkingMapOutput() NetworkingMapOutput {
	return i.ToNetworkingMapOutputWithContext(context.Background())
}

func (i NetworkingMap) ToNetworkingMapOutputWithContext(ctx context.Context) NetworkingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkingMapOutput)
}

type NetworkingOutput struct {
	*pulumi.OutputState
}

func (NetworkingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Networking)(nil))
}

func (o NetworkingOutput) ToNetworkingOutput() NetworkingOutput {
	return o
}

func (o NetworkingOutput) ToNetworkingOutputWithContext(ctx context.Context) NetworkingOutput {
	return o
}

func (o NetworkingOutput) ToNetworkingPtrOutput() NetworkingPtrOutput {
	return o.ToNetworkingPtrOutputWithContext(context.Background())
}

func (o NetworkingOutput) ToNetworkingPtrOutputWithContext(ctx context.Context) NetworkingPtrOutput {
	return o.ApplyT(func(v Networking) *Networking {
		return &v
	}).(NetworkingPtrOutput)
}

type NetworkingPtrOutput struct {
	*pulumi.OutputState
}

func (NetworkingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Networking)(nil))
}

func (o NetworkingPtrOutput) ToNetworkingPtrOutput() NetworkingPtrOutput {
	return o
}

func (o NetworkingPtrOutput) ToNetworkingPtrOutputWithContext(ctx context.Context) NetworkingPtrOutput {
	return o
}

type NetworkingArrayOutput struct{ *pulumi.OutputState }

func (NetworkingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Networking)(nil))
}

func (o NetworkingArrayOutput) ToNetworkingArrayOutput() NetworkingArrayOutput {
	return o
}

func (o NetworkingArrayOutput) ToNetworkingArrayOutputWithContext(ctx context.Context) NetworkingArrayOutput {
	return o
}

func (o NetworkingArrayOutput) Index(i pulumi.IntInput) NetworkingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Networking {
		return vs[0].([]Networking)[vs[1].(int)]
	}).(NetworkingOutput)
}

type NetworkingMapOutput struct{ *pulumi.OutputState }

func (NetworkingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]Networking)(nil))
}

func (o NetworkingMapOutput) ToNetworkingMapOutput() NetworkingMapOutput {
	return o
}

func (o NetworkingMapOutput) ToNetworkingMapOutputWithContext(ctx context.Context) NetworkingMapOutput {
	return o
}

func (o NetworkingMapOutput) MapIndex(k pulumi.StringInput) NetworkingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) Networking {
		return vs[0].(map[string]Networking)[vs[1].(string)]
	}).(NetworkingOutput)
}

func init() {
	pulumi.RegisterOutputType(NetworkingOutput{})
	pulumi.RegisterOutputType(NetworkingPtrOutput{})
	pulumi.RegisterOutputType(NetworkingArrayOutput{})
	pulumi.RegisterOutputType(NetworkingMapOutput{})
}
