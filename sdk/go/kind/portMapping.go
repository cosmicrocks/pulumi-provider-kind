// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package kind

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// KIND PortMapping
type PortMapping struct {
	pulumi.CustomResourceState
}

// NewPortMapping registers a new resource with the given unique name, arguments, and options.
func NewPortMapping(ctx *pulumi.Context,
	name string, args *PortMappingArgs, opts ...pulumi.ResourceOption) (*PortMapping, error) {
	if args == nil {
		args = &PortMappingArgs{}
	}

	var resource PortMapping
	err := ctx.RegisterResource("kind:index:PortMapping", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPortMapping gets an existing PortMapping resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPortMapping(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PortMappingState, opts ...pulumi.ResourceOption) (*PortMapping, error) {
	var resource PortMapping
	err := ctx.ReadResource("kind:index:PortMapping", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PortMapping resources.
type portMappingState struct {
}

type PortMappingState struct {
}

func (PortMappingState) ElementType() reflect.Type {
	return reflect.TypeOf((*portMappingState)(nil)).Elem()
}

type portMappingArgs struct {
	ContainerPort *int    `pulumi:"containerPort"`
	HostPort      *int    `pulumi:"hostPort"`
	ListenAddress *string `pulumi:"listenAddress"`
	Protocol      *string `pulumi:"protocol"`
}

// The set of arguments for constructing a PortMapping resource.
type PortMappingArgs struct {
	ContainerPort pulumi.IntPtrInput
	HostPort      pulumi.IntPtrInput
	ListenAddress pulumi.StringPtrInput
	Protocol      pulumi.StringPtrInput
}

func (PortMappingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*portMappingArgs)(nil)).Elem()
}

type PortMappingInput interface {
	pulumi.Input

	ToPortMappingOutput() PortMappingOutput
	ToPortMappingOutputWithContext(ctx context.Context) PortMappingOutput
}

func (*PortMapping) ElementType() reflect.Type {
	return reflect.TypeOf((*PortMapping)(nil))
}

func (i *PortMapping) ToPortMappingOutput() PortMappingOutput {
	return i.ToPortMappingOutputWithContext(context.Background())
}

func (i *PortMapping) ToPortMappingOutputWithContext(ctx context.Context) PortMappingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PortMappingOutput)
}

func (i *PortMapping) ToPortMappingPtrOutput() PortMappingPtrOutput {
	return i.ToPortMappingPtrOutputWithContext(context.Background())
}

func (i *PortMapping) ToPortMappingPtrOutputWithContext(ctx context.Context) PortMappingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PortMappingPtrOutput)
}

type PortMappingPtrInput interface {
	pulumi.Input

	ToPortMappingPtrOutput() PortMappingPtrOutput
	ToPortMappingPtrOutputWithContext(ctx context.Context) PortMappingPtrOutput
}

type portMappingPtrType PortMappingArgs

func (*portMappingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PortMapping)(nil))
}

func (i *portMappingPtrType) ToPortMappingPtrOutput() PortMappingPtrOutput {
	return i.ToPortMappingPtrOutputWithContext(context.Background())
}

func (i *portMappingPtrType) ToPortMappingPtrOutputWithContext(ctx context.Context) PortMappingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PortMappingPtrOutput)
}

// PortMappingArrayInput is an input type that accepts PortMappingArray and PortMappingArrayOutput values.
// You can construct a concrete instance of `PortMappingArrayInput` via:
//
//          PortMappingArray{ PortMappingArgs{...} }
type PortMappingArrayInput interface {
	pulumi.Input

	ToPortMappingArrayOutput() PortMappingArrayOutput
	ToPortMappingArrayOutputWithContext(context.Context) PortMappingArrayOutput
}

type PortMappingArray []PortMappingInput

func (PortMappingArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*PortMapping)(nil))
}

func (i PortMappingArray) ToPortMappingArrayOutput() PortMappingArrayOutput {
	return i.ToPortMappingArrayOutputWithContext(context.Background())
}

func (i PortMappingArray) ToPortMappingArrayOutputWithContext(ctx context.Context) PortMappingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PortMappingArrayOutput)
}

// PortMappingMapInput is an input type that accepts PortMappingMap and PortMappingMapOutput values.
// You can construct a concrete instance of `PortMappingMapInput` via:
//
//          PortMappingMap{ "key": PortMappingArgs{...} }
type PortMappingMapInput interface {
	pulumi.Input

	ToPortMappingMapOutput() PortMappingMapOutput
	ToPortMappingMapOutputWithContext(context.Context) PortMappingMapOutput
}

type PortMappingMap map[string]PortMappingInput

func (PortMappingMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*PortMapping)(nil))
}

func (i PortMappingMap) ToPortMappingMapOutput() PortMappingMapOutput {
	return i.ToPortMappingMapOutputWithContext(context.Background())
}

func (i PortMappingMap) ToPortMappingMapOutputWithContext(ctx context.Context) PortMappingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PortMappingMapOutput)
}

type PortMappingOutput struct {
	*pulumi.OutputState
}

func (PortMappingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PortMapping)(nil))
}

func (o PortMappingOutput) ToPortMappingOutput() PortMappingOutput {
	return o
}

func (o PortMappingOutput) ToPortMappingOutputWithContext(ctx context.Context) PortMappingOutput {
	return o
}

func (o PortMappingOutput) ToPortMappingPtrOutput() PortMappingPtrOutput {
	return o.ToPortMappingPtrOutputWithContext(context.Background())
}

func (o PortMappingOutput) ToPortMappingPtrOutputWithContext(ctx context.Context) PortMappingPtrOutput {
	return o.ApplyT(func(v PortMapping) *PortMapping {
		return &v
	}).(PortMappingPtrOutput)
}

type PortMappingPtrOutput struct {
	*pulumi.OutputState
}

func (PortMappingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PortMapping)(nil))
}

func (o PortMappingPtrOutput) ToPortMappingPtrOutput() PortMappingPtrOutput {
	return o
}

func (o PortMappingPtrOutput) ToPortMappingPtrOutputWithContext(ctx context.Context) PortMappingPtrOutput {
	return o
}

type PortMappingArrayOutput struct{ *pulumi.OutputState }

func (PortMappingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PortMapping)(nil))
}

func (o PortMappingArrayOutput) ToPortMappingArrayOutput() PortMappingArrayOutput {
	return o
}

func (o PortMappingArrayOutput) ToPortMappingArrayOutputWithContext(ctx context.Context) PortMappingArrayOutput {
	return o
}

func (o PortMappingArrayOutput) Index(i pulumi.IntInput) PortMappingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PortMapping {
		return vs[0].([]PortMapping)[vs[1].(int)]
	}).(PortMappingOutput)
}

type PortMappingMapOutput struct{ *pulumi.OutputState }

func (PortMappingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]PortMapping)(nil))
}

func (o PortMappingMapOutput) ToPortMappingMapOutput() PortMappingMapOutput {
	return o
}

func (o PortMappingMapOutput) ToPortMappingMapOutputWithContext(ctx context.Context) PortMappingMapOutput {
	return o
}

func (o PortMappingMapOutput) MapIndex(k pulumi.StringInput) PortMappingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) PortMapping {
		return vs[0].(map[string]PortMapping)[vs[1].(string)]
	}).(PortMappingOutput)
}

func init() {
	pulumi.RegisterOutputType(PortMappingOutput{})
	pulumi.RegisterOutputType(PortMappingPtrOutput{})
	pulumi.RegisterOutputType(PortMappingArrayOutput{})
	pulumi.RegisterOutputType(PortMappingMapOutput{})
}
